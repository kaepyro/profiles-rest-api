from rest_framework.views import APIView
from rest_framework.response import Response
# status object: http status codes
from rest_framework import status
# this is the serializer what we created
from profiles_api import serializers


# it works by defining an url as an endpoint and assigning to the View
# it expects a different functions for each http requests
class HelloApiView(APIView):
    """Test API View"""
    serializer_class = serializers.HelloSerializer

    # request is passed by django rest_framework format is adding and ending suffix
    # to the endpoint url. Best practice to keep there, just in case.
    # the element of the list are for demonstrartion purposes, how to
    # return an object by an APIView
    def get(self, request, format=None):
        """Returns a list of APIView features"""

        an_apiview = [
        'Uses HTTP methods as function (get, post, patch, put, delete)',
        'Is similar to a traditional Django View',
        'Gives you the most control over your application logic',
        'Is mapped manually to URLs'
        ]

        # The Response object will be converted to Json. In order to be converted to json
        # the returned object has to be a list or a dictionary
        return Response({'message': 'Hello','an_apiview': an_apiview})

    # Handling http post request
    def post(self, request):
        """Create a hello message with our name"""
        # retrieve the serializer and pass the data recieved from the request
        # self.serializer_class function comes with the APIView
        # standard way retrieve the serializer class
        serializer = self.serializer_class(data=request.data)

        # the serializer class can also validate the input
        # so here, its max length can be 10 character
        if serializer.is_valid():
            # you can retrieve any field this way that you defined in the
            # serializer
            name = serializer.validated_data.get('name')
            message = f'Hello {name}'
            return Response({'message': message})
        # if the input is not valid:
        else:
            return Response(
                #return the errors generated by the serializer based on our rules
                serializer.errors,
                #also return the error code
                status=status.HTTP_400_BAD_REQUEST
                )

    # handling http put request
    # pk: ID of the object what you update
    # in the examples above we won't update any object!
    def put(self, request, pk=None):
        """Handle updating an object"""
        return Response({'method': 'PUT'})

    # patch only updates a field which is provided in the request
    # if you have a first name and a last name field and only provide
    # a first name, it will update it and does not change the last name
    # the same with the put would remove the last name!
    def patch(self, request, pk=None):
        """Handle partial update of an object"""
        return Response({'method': 'PATCH'})

    def delete(self, request, pk=None):
        """Delet an object"""
        return Response({'method': 'DELETE'})
        
